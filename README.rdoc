= Тестовое задание

Каждый потенциальный заказчик просит выполнить тестовое задание. Я хорошо понимаю это требование.
Всегда хочется быть уверенным, что потенциальный претендент владеет технологиями, о которых 
заявляет.

С другой стороны, тестовое задание редко представляет из себя нечто живое. Обычно, его формулировка
похожа на известный анекдот: "Я уже построил модель, описывающую поведение сферического коня 
в вакууме".

Так что, я решил одного из таких коней описать раз и навсегда.

Целью этого тестового задания было показать направление мыслей, а не сделать задачу на 110%. 
Так что, имеют место некоторые допущения.

== Формулировка (заказчик)

http://docs.google.com/View?id=dgjq83q7_25fc32sxf8

== Инсталляция и запуск

  git clone git://github.com/gzigzigzeo/my_ror_test_task.git
  git submodule update --init
  cd my_ror_test_task
  rake gems:install
  rake gems:install RAILS_ENV=test
  rake db:migrate db:fixtures:load db:fixtures:rebuild_conf_units  
  ruby script/server
  
== Комментарии для пользователя
   
1. Редактор КУ (главная страница) работает как проводник Windows. Элементы можно перетаскивать за
  зелёные крестики. Изменять порядок КУ можно, зажав <ALT> при перетаскивании. Это сработает 
  для элементов с общим родителем.
  
2. Внутри КУ динамический атрибут имеет название и значение, но не имеет типа. Это было бы
  упущением, если не было бы допущением. Разумеется, в живом проекте название выбиралось
  бы из выпадающего списка, чтобы можно было выбрать значения одного и того же атрибута у разных
  КУ.

3. Симулировать падение и поднятие КУ можно так:
  
  rake conf_unit:simulate_deactivation # Случайные КУ деактивируются. В списке появятся красные строчки.
  rake conf_unit:notify                # Дети этих КУ станут красными
  rake conf_unit:simulate_activation   # Некоторые КУ активируются
  rake conf_unit:notify                # Активируются их дети

== Что видно из кода?

- Ruby и Ruby on Rails
  
- git
  Все плагины вынесены в сабмодули. Плагин awesome_nested_set - мой форк форка :) оригинального 
  awesome_nested_set с несколькими полезными улучшениями (#tree, #each_recursive).
  
- Я умею читать документацию и разбираться в чужом коде. 
  Два метода, о которых сказано выше нужны для рекурсивного обхода дерева с использованием
  единственного запроса к БД.
  
- Я использую шаблоны проектирования. Это видно из реализации awesome_nested_set#cache, класс
  TreeProxy.
  
- Я владею TDD. RSpec, RR, machinist и remarkable. В коде есть тесты для двух моделей и контроллера КУ.
  BDD мне тоже не чужд. Cucumber использовал.
  
- Умею HAML.
- jQuery, jQuery UI - видно по редактору КУ и частично по редактору услуги. 
  Без проблем пишу на javascript.

== Формальнее и о себе

Меня зовут Виктор, я из Питера.

Опыт на вебе - около восьми лет (с 2001). Рельсы - около двух лет.
Тащусь от них. :)

Краткий список того, с чем сталкивался на вебе:
 - RoR (плюс основные плагины).
 - PHP (phpDoctrine, Symfony, Cake).
 - Git/SVN.
 - SQL (mySQL, Firebird, MSSQL). Postgres использовал совсем немного.
 - Javascript (Prototype => jQuery, Ext).
 - ASP.NET (MVC Toolkit)
 - ActionScript 3.0 + FMS (не глубоко, эксперименты для оценки сроков
по проекту видеохостинга).

Не на вебе:
 - C++ (STL, boost, WTL, MFC, немного - сервер под UNIX)
 - C# (NHibernate, Castle ActiveRecord ZedGraph)
 - Когда-то - ассемблер (80386, в защищённом режиме - игрушки на Watcom C,
занимал в школе с ними первые места по городу :)
 - Smalltalk (VisualAge, Squeak, ST/X - чисто поиграться)
 - UNIX.

Каждую технологию/плагин/фреймворк из упомянутых реально использовал
хотя бы в одном проекте или прототипе.
